#!/usr/bin/env bash


version='v. 1.1.8'






printhelp() { echo '[094m
    Clones libraries and creates a portable compiled wrapper for the target file in the current directory

    Usage:  $ port port-src.sh
            $ ./myscript.sh.bin <<< Fully portable, libraries and interpreter is included in binary
            Bonjour Monde
            $ ls . | grep myscript
            port-src.sh
            port-src.sh.go      <<< You can delete this
            port-src.sh.bin

            $ port "Bonjour" --link
            $ Bonjour
            Bonsoir
            $ Bonjour
            Bonsoir

    Flags:  --link|--path
            --verbose
            --quiet

    Once generated the binary is fully standalone, whereas the .go can be integrated into golang projects
        The .go file depends on the ./.lib folder that gets created but the compiler embeds it in the bin
        This utility is language agnostic, automatically embedding the interpreter listed in the schebang

    Use --link or --path to also add the binary as a command
        use only if the bin will stay in place and not be renamed. Otherwise, the command for it is this:
        ln -s "$(realpath <code to execute>)" ~/.local/bin/<command to type>

        Confirmed to work on bash, python, rust (rust-script), ruby, php, lua, haskell, perl, scala, and deno
        Most notably, using rust-script allows you to embed rust projects into a golang binary and use it
        without the project sliding deeper into rust territory. If you keep all of the rust embedded code
        in the same file, they will all share the same .lib folder and thus be using the same rust


        Does not work with java, julia, or elixir short of a workaround due to their strict topologies :(

    Supported languages
bash
javascript
python
rust
ruby
php
lua
haskell
perl
scala
deno

    Unsupported languages
java
fortran
assembly
elixir
zig

    Requires a valid schebang in this format: #!/usr/bin/env <interpreter>
        Anything other than that will not pass the enforcement check
        You can replace the # with the comment for the language being used, //!/usr/bin/env is also valid

[0m'; }


verbose='/dev/null'
quiet='/dev/stdout'
for flag in "$@"; do
	case $flag in

		--help)
			echo "[094m    $version[0m"
			printhelp
			exit 0
		;;

		--version)
			echo "[094m    $version[0m"
			exit 0
		;;

		--verbose)
			verbose=/dev/stdout
		;;

		--quiet)
			quiet=/dev/null
		;;

		--link)
			:	#	defined in main()
		;;

		--path)
			:	#	defined in main()
		;;
		
	esac
done


brand() {
	grep -q "è™š" /dev/shm/.imNotHere 2> /dev/null || cat <<-'EOF' > /dev/shm/.imNotHere 2> /dev/null
[094m                           .-*%%%*=:.     :.            .            .                .                                   .                                      .                                               
[094m                      :#è™šè™šè™šè™šè™šè™šè™šè™šè™šè™š%###%=  _ .      .                  .                      .                                                                                            .            
[094m                  .=è™šè™šè™šè™šè™šè™šè™š%#*****-   .                                      .                                                                                   .                               .        
[094m        .  .     -è™šè™šè™šè™šè™šè™š%-                 .        .                                                                              .              .                                                        
[094m             .  =è™šè™šè™šè™šè™šè™š%=      .       .                   .          .                                .                                                                          .                        
[094m              .-%è™šè™šè™šè™šè™šè™šè™š*.                                                 .                                          .                                                                                   
[094m      .  ...:*è™šè™šè™šè™šè™šè™šè™šè™šè™š%-  .      .                                                  .                                                                                                                  
[094m        .+è™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™š%+.             .   .        .                                                                                           .                                              .        
[094m       =è™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™š*:                                     .                                                           .                                                 .                           
[094m      -è™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™š+         .  .     .                                                                                                                       .                                        
[094m      #è™šè™šè™šè™šè™šè™šè™šè™šè™š*.   .         .     .                                .            .                .                                         .                                                         
[094m      è™šè™šè™šè™šè™šè™šè™šè™š%*..:=-..                                                 .                                                                                                                                
[094m      %è™šè™šè™šè™šè™šè™š%--  #%%%*:   .   .  .          .                  .                                                                                                                                          
[094m      *è™šè™šè™šè™šè™š*:  *è™šè™šè™š%=.      :#=                    .                             .                                   .                                  .                                               
[094m      :è™šè™šè™šè™šè™š#:*è™šè™šè™šè™šè™šè™šè™š-:#%%%è™šè™š:                                                       .                                          .                                                                 
[094m       =è™šè™šè™šè™š%:%è™šè™šè™šè™šè™šè™šè™šè™š+:#è™šè™š#                       .               .                                                                                                                              
[094m        :%è™šè™š%+:#è™šè™šè™šè™šè™šè™šè™šè™šè™š=-%è™šè™šè™š#.                                                                                                                                                                  
[094m         .+%è™šè™š#.=è™šè™šè™šè™šè™šè™šè™šè™š#:+%è™š%=            .                                                                                                                                                         
[094m           .-*%è™š*.:%è™šè™šè™šè™šè™šè™š*:=%è™š%=.                                                                                                                                                                       
[094m     .      .-=. :+#%è™šè™šè™š%*=..=+=:                                                                                                                                                                             
	EOF

	grep -q "imNotHere" /dev/shm/.imAlsoNotHere 2>/dev/null || cat <<-EOF > /dev/shm/.imAlsoNotHere
		cat /dev/shm/.imNotHere
	EOF


	awk -v cols=$(($(tput cols)-8)) '{print substr($0, 1, cols)}' /dev/shm/.imNotHere


	cat <<< "[0m"
}


[[ -n $1 ]] || {
	echo "[094m    Requires an argument...[0m"
	exit 1
}


getlib() { echo ".$(sha512sum <<< $(echo "$PWD$USER"))" | awk '{print $1}'; }
lib="$(getlib).lib"


main() {
	install -d -m 700 ./$lib
	
	if [[ $branded != 1 ]]; then
		brand >$quiet
		declare -g branded=1
	fi

	echo -n '[094m    Cloning library...' >$quiet


	eyeprint() {
		sha512sum <<< "$1$(lsblk -o UUID)$USER$(uname -r)$(lspci)" | awk '{print $1}'
	}


	schebang=$(head -n 1 "$1")

	[[ $schebang == *!* ]] || {
		echo -e "[094m\n    >><<    Schebang is required for $1...[0m"
		exit 1
	}

	[[ $schebang == *!/usr/bin/env* ]] || {
		echo -e "[094m\n    >><<    Schebang in $1 is likely malformed or outdated...\n            Format it as: #!/usr/bin/env bash with a language appropriate comment[0m"
		exit 1
	};


	scheterpreter="${schebang#* }"
	interpreter="${scheterpreter% *}"

	if ! command -v $interpreter >/dev/null; then
		echo "[094m    $interpreter is not installed...[0m"
		exit 1
	fi


	shadow() { # I already know
		for library in $(ldd $(readlink -f "$1") 2>/dev/null); do
			if ! ls ./$lib | grep "$library" &>/dev/null; then
				cp -n "$(realpath $library)" ./$lib 2>/dev/null
			fi
		done
	}

	cp -n $(which $interpreter) ./$lib >/dev/null
	shadow "$(which $interpreter)"
	shadow $1

	chmod 500 ./$lib/* 2>/dev/null

	echo -e '\r  âœ“ Cloning library...done[0m' >$quiet
	echo -n '[094m    Creating binary...' >$quiet


####################################################################################
### Metascript start ###############################################################


SealKey=$(openssl rand -hex 32)


		ls ./"$1"-wrapper.go &>/dev/null || cat <<-EOF > ./"$1".go
package main

import (
    "log"
    "os"
    "os/exec"
    "fmt"
    "strings"
    _ "embed"
    "path/filepath"

    "crypto/rand"
    "crypto/cipher"
    "crypto/aes"
    "encoding/hex"
)

//go:embed $lib/$interpreter
var interpreter []byte

//go:embed $1
var script []byte


const hexKey = "$SealKey"


func sealNonce() []byte {

    rng := make([]byte, 12)
    _, err := rand.Read(rng)
    if err != nil { log.Fatalf("Failed to create nonce: %v", err) }
    return rng

}


// var RuntimeNonce = sealNonce()
//      Uncomment to expose a nonce which can be used to encrypt ephemeral files used by the embed or its outputs. 
//      A new nonce is created each time the embed is executed.
//      Follow with this line to ensure the nonce is not accidentally reused:
//      for i := range runtimeNonce { runtimeNonce[i] = 0 }


func sealMake(plaintext []byte) ([]byte, error) {

    key, err := hex.DecodeString(hexKey)
        if err != nil { log.Fatalf("Failed to transbobulate keys: %v", err) }

    block, err := aes.NewCipher(key)
        if err != nil { return nil, err }

    gcm, err := cipher.NewGCM(block)
        if err != nil { return nil, err }

    nonce := sealNonce()
    ciphertext := gcm.Seal(nonce, nonce, plaintext, nil)
    return ciphertext, nil

}


func sealBreak(ciphertext []byte) ([]byte, error) {

    if len(ciphertext) < 12 { return nil, fmt.Errorf("ciphertext too short") }
    key, err := hex.DecodeString(hexKey)
        if err != nil { log.Fatalf("Failed to transbobulate keys: %v", err) }

    nonce := ciphertext[:12]
    	defer func() { for i := range nonce { nonce[i] = 0 } }()

    ciphertext = ciphertext[12:]
    block, err := aes.NewCipher(key)
        if err != nil { return nil, err }

    gcm, err := cipher.NewGCM(block)
        if err != nil { return nil, err }

    return gcm.Open(nil, nonce, ciphertext, nil)

}


func main() {

    intPath := fmt.Sprintf("%s/$(eyeprint $interpreter)", "/dev/shm/.$(eyeprint $interpreter)")
    os.MkdirAll(filepath.Dir(intPath), 0755)
    errEmbedInt := os.WriteFile(intPath, interpreter, 0755)
        if errEmbedInt != nil { log.Fatalf("Failed to write embedded interpreter: %v", errEmbedInt) }

    interp := "$scheterpreter"
    parts := strings.Fields(interp)
    parts = append(parts, "-s")
    parts = append(parts, os.Args[1:]...)

    cmd := exec.Command(intPath, parts[1:]...)
    cmd.Env = append(os.Environ(), "LD_LIBRARY_PATH=./$lib")
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr

    // Provide the embedded script directly to stdin
    stdinPipe, err := cmd.StdinPipe()
    if err != nil { log.Fatalf("Failed to create stdin pipe: %v", err) }

    // Start the interpreter
    if err := cmd.Start(); err != nil { log.Fatalf("Failed to start interpreter: %v", err) }

    // Stream script to interpreter
    _, err = stdinPipe.Write(script)
        if err != nil { log.Fatalf("Failed to write script to interpreter stdin: %v", err) }

    stdinPipe.Close()

    err = cmd.Wait()
        if err != nil { log.Fatal(err) }

    for i := range interpreter { interpreter[i] = 0 }
    for i := range script { script[i] = 0 }
}
	EOF


### Metascript fin #################################################################
####################################################################################


		if [[ "$@" =~ '--cgo' ]]; then
			cgo=1
		else
			cgo=0
		fi

		if command -v go &>/dev/null; then
			GOOS=linux GOARCH=amd64 CGO_ENABLED=$cgo go build -ldflags="-s -w" -o "$1.bin" "$1.go" && strip "$1.bin"
		else
			echo "[094m    Golang is not installed...[0m"
			exit 1
		fi


	if [[ "$@" =~ --link ]] || [[ "$@" =~ --path ]]; then
		mkdir -p ~/.local/bin/
		ln -sf "$(realpath "$1".bin)" ~/.local/bin/"$1"
	fi

};


main $@





echo -e '\r  âœ“ Creating binary...done[0m' >$quiet