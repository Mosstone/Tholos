#!/usr/bin/env bash
#/*


version='v.2.1.1'


# Copyright 2025 Daniel Buerer

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.






printhelp() { echo '[094m
    Clones libraries and creates a portable compiled wrapper for the target file in the current directory

    Usage:  $ cat Bonjour.py 
            #!/usr/bin/env python
            print("Coucou")
            $ thol Bonjour.py --quiet
            $ ./Bonjour.py.bin  <<<    The active version of python is included in the binary. This can be moved anywhere, but if the python uses imports the new system will need to have those imports as well
            Coucou

            $ ./port thol --link
            $ thol wunder --quiet; ls . | grep wunder
            wunder              <<<    Keep if you are importing the .go module; it references the original at compile time and they must be in the same directory location
            wunder.go           <<<    Only keep if you are importing into a larger go binary, this is a usable module which fully includes the code at compile time
            wunder.bin          <<<    Only keep if you want the script as a standalone binary. Not relevant outside of testing if the thol code is becoming a module
                                        which has security advantages, resists mutation, and uses a snapshot of the interpreter while still using the system librariesâ€”especially useful for python


    Flags:  --link|--path
            --verbose
            --quiet

    Once generated the binary is fully standalone, whereas the .go can be integrated into golang projects
        The .go file depends on the ./.lib folder that gets created but the compiler embeds it in the bin
        This utility is language agnostic, automatically embedding the interpreter listed in the schebang

    Use --link or --path to also add the binary as a command
        use only if the bin will stay in place and not be renamed. Otherwise, the command for it is this:
        ln -s "$(realpath <code to execute>)" ~/.local/bin/<command to type>


        Does not work with java, julia, or elixir short of a workaround due to their strict topologies :(

    Supported languages
bash
python
rust      (via rust-script)
perl
R
javascript
ruby
php
lua
luatex         | Converts and executes in the current working directory. This causes some unavoidable latency but
jupyter     << | otherwise works the same way as when the notebook was embedded originally. From here, recipients
scala          | do not require the same (or any) jupyter to be installed to run the notebook. Code added to this
deno           | notebook therefore will execute internally through stdin making it suitable for multistage procs
wolfram
matlab    (via octave)
tcl                  
rexx                 
scheme    (via racket)
haskell   (via runghc)

    Note: if the file extension is not recognized Tholos defaults to checking the schebang
    Valid schebangs must be in the form #!/usr/bin/env <interpreter>

[0m'; }


verbosity='/dev/null'
quietude='/dev/stdout'
for flag in "$@"; do
	case $flag in

		--help)
			echo "[094m    $version[0m"
			printhelp
			exit 0
		;;

		-v|--version)
			echo "[094m    $version[0m"
			exit 0
		;;

		--verbose)
			verbosity=/dev/stdout
		;;

		--quiet)
			quietude=/dev/null
		;;

		--link)
			:	#	defined in main()
		;;

		--path)
			:	#	defined in main()
		;;
		
	esac
done


brand() {
	grep -q "è™š" /dev/shm/.imNotHere 2> /dev/null || cat <<-'EOF' > /dev/shm/.imNotHere 2> /dev/null

[094m                           .-*%%%*=:.     :.            .            .                .                                   .                                      .                                               
[094m                      :#è™šè™šè™šè™šè™šè™šè™šè™šè™šè™š%###%=  _ .      .                  .                      .                                                                                            .            
[094m                  .=è™šè™šè™šè™šè™šè™šè™š%#*****-   .                                      .                                                                                   .                               .        
[094m        .  .     -è™šè™šè™šè™šè™šè™š%-                 .        .                                                                              .              .                                                        
[094m             .  =è™šè™šè™šè™šè™šè™š%=      .       .                   .          .                                .                                                                          .                        
[094m              .-%è™šè™šè™šè™šè™šè™šè™š*.                                                 .                                          .                                                                                   
[094m      .  ...:*è™šè™šè™šè™šè™šè™šè™šè™šè™š%-  .      .                                                  .                                                                                                                  
[094m        .+è™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™š%+.             .   .        .                                                                                           .                                              .        
[094m       =è™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™š*:                                     .                                                           .                                                 .                           
[094m      -è™šè™šè™šè™šè™šè™šè™šè™šè™šè™šè™š+         .  .     .                                                                                                                       .                                        
[094m      #è™šè™šè™šè™šè™šè™šè™šè™šè™š*.   .         .     .                                .            .                .                                         .                                                         
[094m      è™šè™šè™šè™šè™šè™šè™šè™š%*..:=-..                                                 .                                                                                                                                
[094m      %è™šè™šè™šè™šè™šè™š%--  #%%%*:   .   .  .          .                  .                                                                                                                                          
[094m      *è™šè™šè™šè™šè™š*:  *è™šè™šè™š%=.      :#=                    .                             .                                   .                                  .                                               
[094m      :è™šè™šè™šè™šè™š#:*è™šè™šè™šè™šè™šè™šè™š-:#%%%è™šè™š:                                                       .                                          .                                                                 
[094m       =è™šè™šè™šè™š%:%è™šè™šè™šè™šè™šè™šè™šè™š+:#è™šè™š#                       .               .                                                                                                                              
[094m        :%è™šè™š%+:#è™šè™šè™šè™šè™šè™šè™šè™šè™š=-%è™šè™šè™š#.                                                                                                                                                                  
[094m         .+%è™šè™š#.=è™šè™šè™šè™šè™šè™šè™šè™š#:+%è™š%=            .                                                                                                                                                         
[094m           .-*%è™š*.:%è™šè™šè™šè™šè™šè™š*:=%è™š%=.                                                                                                                                                                       
[094m     .      .-=. :+#%è™šè™šè™š%*=..=+=:                                                                                                                                                                             
	EOF

	grep -q "imNotHere" /dev/shm/.imAlsoNotHere 2>/dev/null || cat <<-EOF > /dev/shm/.imAlsoNotHere
		cat /dev/shm/.imNotHere
	EOF


	awk -v cols=$(($(tput cols)-8)) '{print substr($0, 1, cols)}' /dev/shm/.imNotHere


	cat <<< "[0m"
}


[[ -n $1 ]] || {
	echo "[094m    Requires an argument...[0m"
	exit 1
}


getlib() { echo ".$(sha512sum <<< $(echo "$PWD$USER"))" | awk '{print $1}'; }
lib="$(getlib).lib"


loc="$(realpath $(dirname "${BASH_SOURCE[0]}"))"


#   Logic       #################################################


monolith() {
	install -d -m 700 ./$lib
	
	if [[ $branded != 1 ]]; then
		brand >$quietude
		declare -g branded=1
	fi

	echo -n '[094m    Embedding Interpreter...' >$quietude

	eyeprint() {
		sha256sum <<< "$1$(lsblk -o UUID)$USER$(uname -r)$(lspci)" | awk '{print $1}'
	}

    #   Inject default values for the schebang based on file exention, defaulting to scan the actual
    #   schebang if there is no extension matched in the target. Therefore you need the extension OR
    #   the schebang but not both, but using both is recommended because then it will also work on a
    #   .bak extension or similar. The schebang is not checked if the extension matches something on
    #   this list.
    case $1 in

        *.bat)
            schebang="pwsh"
        ;;

        *.py)
            schebang="python"
        ;;

        *.sh)
            schebang="bash"
        ;;

        *.rs)
            schebang="rust-script"
        ;;

        *.js|*.mjs|*.cjs)
            schebang="node"
        ;;

        *.ts)
            schebang="ts-node"
        ;;

        *.ru)
            schebang="ruby"
        ;;

        *.php)
            schebang="php"
        ;;

        *.perl)
            schebang="perl"
        ;;

        *.deno)
            schebang="deno"
        ;;

        Makefile)
            schebang="make"
        ;;

        *.lua)
            schebang="lua"
        ;;

        *.tex)
            schebang="lualatex"
        ;;

        *.scala)
            schebang="scala"
        ;;

        *.R)
            schebang="Rscript"
        ;;

        *.m)
            schebang="octave"
        ;;

        *.tcl)
            schebang="tcl"
        ;;

        *.rexx|*.rex)
            schebang="rexx"
        ;;

        *.wl)
            schebang="wolframscript"
        ;;

        *.meson.build)
            schebang="meson"
        ;;

        *.ansible.yml)
            schebang="ansible"
        ;;

        *.tf)
            schebang="terraform"
        ;;

#<      The interpreters past this point do not support schebangs
        *.ipynb)
            schebang="jupyter"
        ;;

        *)

            schebang=$(head -n 1 "$1")

            [[ $schebang == *!* ]] || {
                echo -e "[094m\n    >><<    Schebang is required for $1...[0m"
                exit 1
            }

            [[ $schebang == *!/usr/bin/env* ]] || {
                echo -e "[094m\n    >><<    Schebang in $1 is likely malformed or outdated...\n            Format it as: #!/usr/bin/env <interpreter>[0m"
                exit 1
            };

        ;;
    esac

	scheterpreter="${schebang#* }"
	interpreter="${scheterpreter% *}"

    #   Override for when a custom interpreter is used
    case $interpreter in
    # jupyter)

    #     interpreter="jupyterExec.py.bin"
    #     mkdir -p "./$lib"
    #     cp -an "$(realpath "../../.resource/$interpreter")" "$lib"
    #     chmod +x $lib/$interpreter

    # ;;

    *)
        if ! command -v $interpreter >/dev/null; then
            echo "[094m    $interpreter is not installed...[0m"
            exit 1
        fi
    ;;
    esac

    echo "Interpreter is $interpreter" > $verbosity

	shadow() {
        for library in $(ldd $(readlink -f "$1") 2>/dev/null); do
            if ! ls ./$lib | grep "$library" &>/dev/null; then
                cp -n "$(realpath $library)" ./$lib 2>/dev/null
            fi
        done
	}

    if [[ -n $(which $interpreter 2>/dev/null) ]]; then
        cp -n $(which $interpreter) ./$lib >/dev/null
        shadow "$(which $interpreter)"
    fi
	shadow $1

	chmod 500 ./$lib/* 2>/dev/null

	echo -e '\r  âœ“ Embedding Interpreter...done[0m' >$quietude
	echo -n '[094m    Compiling Binary...' >$quietude


####################################################################################
### Metascript start ###############################################################
#*/

    local needFile="false"      #   Defaults to using stdin, write needfile="true" where stdin is not supported
    local CmdFlags              #       Any new interpreters may require a CmdFlags+=("-") if they accept stdin
    local EnvFlags
    case "$interpreter" in

        pwsh)
            CmdFlags+=("-NonInteractive")
        
            # EnvFlags+=("LD_LIBRARY_PATH=/opt/microsoft/powershell/7/pwsh.dll")
            # EnvFlags+=("DOTNET_ROOT=/opt/microsoft/powershell/7/pwsh.dll")

            CmdFlags+=("-")
        ;;

        python*)
            #   This is the arguments to be added. The following is the equivalent to running "python -Osu .py"
            #   All of the defaults here are optimized for performance where possible although the effect would
            #   be relatively minor. 
            CmdFlags+=("-O")
            CmdFlags+=("-s")
            CmdFlags+=("-u")


            CmdFlags+=("-")     #<< | These dash flags need to remain the final cmdFlag in a stanza, if present
                                #   | Generally exclusive with needFile, it indicates stdin as the input source


            #   This is where you would export paths and any other data you want to ensure the thol embed uses 
            EnvFlags+=("PYTHONPATH=$HOME/Tholos/.libraries/python")
            
        ;;

        bash)
            CmdFlags+=("-s")

            # echo "EnvFlags+=("LD_LIBRARY_PATH=./$lib")"
        ;;

        # rust-script)
        #     loc="/dev/shm/.$(eyeprint $interpreter)/rust-script"        #   switch the comments to cache 
        #     # loc="./$lib/rust-script"                                    #   to memory instead of to disc


        #     CmdFlags+=("--debug")
        #     CmdFlags+=("-s")


        #     needFile="true"


        #     EnvFlags+=("RUST_SCRIPT_CACHE=$(realpath $loc)")
        #     EnvFlags+=("RUST_BACKTRACE=1")




        #             # needFile="true"


        #     # CmdFlags+=("-s")


        #     # # EnvFlags+=("RUST_SCRIPT_CACHE=/dev/shm/.$(eyeprint $interpreter)/rust-script")
        #     # EnvFlags+=("RUST_SCRIPT_CACHE=./$lib/rust-script")
        #     # EnvFlags+=("RUST_BACKTRACE=1")
        # ;;

        rust-script|rust)
            needFile="true"

            EnvFlags+=("RUST_SCRIPT_CACHE=./$lib/rust-script") # caches the binary in the Tholos files, keeping it away from the system files
            EnvFlags+=("RUST_BACKTRACE=1")  # shows crash information if there is an error
        ;;

        node)
            EnvFlags+=("NODE_PATH=./embedded_node_modules")


            CmdFlags+=("-")
        ;;

        ts-node)
            CmdFlags+=("--esm") # if esm is desired
        ;;

        ruby)
            CmdFlags+=("-s")


            CmdFlags+=("-")
        ;;

        php)
            CmdFlags+=("-")
        ;;

        perl)
            CmdFlags+=("-s")
            CmdFlags+=("-T")


            CmdFlags+=("-")


            EnvFlags+=("PERL5LIB=./$lib")
        ;;

        deno)
            CmdFlags+=("run")


            needFile="true"
        ;;

        make)
            CmdFlags+=("-f")


            needFile="true"
        ;;

        racket)
            needFile="true"
        ;;

        lua)
        #     # CmdFlags+=("-l")
        #     # CmdFlags+=("<lib>")


        CmdFlags+=("-")         #   test later
        ;;

        lualatex)
            output="${1%.*}"    #   The name of the pdf output. This default uses the
                                #   base name, so "thol Lyon.tex" results in Lyon.pdf

            # CmdFlags+=("--output-format=dvi")
            # CmdFlags+=("--luaonly")       

            CmdFlags+=("--interaction=nonstopmode")
            CmdFlags+=("--shell-escape")
            CmdFlags+=("-recorder")
            CmdFlags+=("--progname=lualatex")
            CmdFlags+=("--jobname=$output")


            needFile="true"


            EnvFlags+=("PATH=/usr/bin:$PATH")
            EnvFlags+=("TEXFORMATS=./lib/tex/formats:/var/lib/texmf/web2c/luahbtex")
            EnvFlags+=("LUA_PATH=./?.lua;;")

        ;;

        scala)
            needFile="true"
        ;;

        Rscript)
            CmdFlags+=("--vanilla")
            CmdFlags+=("-e")


            needFile="true"
            # CmdFlags+=("-")       #   Test stdin for Rscript later
        ;;

        octave)
            CmdFlags+=("--silent")
            CmdFlags+=("--no-gui")
            # CmdFlags+=("--persistent")      #     If needed


            # CmdFlags+=("-")   #   verify later
        ;;

        tcl)
            CmdFlags+=("-")
        ;;

        rexx)
            CmdFlags+=("-")
        ;;

        wolframscript)
            CmdFlags+=("-file")


            needFile="true"
        ;;

        wolfram)
            CmdFlags+=("-script")


            needFile="true"
        ;;

        meson)
            CmdFlags+=("build")


            needFile="true"
        ;;

        ansible)
            needFile="true"
        ;;

        terraform)
            CmdFlags+=("apply")
            CmdFlags+=("-auto-approve")

            # needFile="true"
            # CmdFlags+=("-")         #   verify later
        ;;

        jupyter)
            CmdFlags+=("nbconvert")
            CmdFlags+=("--to")
            CmdFlags+=("notebook")
            CmdFlags+=("--execute")
            # CmdFlags+=("--inplace")       
            CmdFlags+=("$tmpPath")
            CmdFlags+=("--output-dir")
            CmdFlags+=("$(realpath $(pwd))")
            CmdFlags+=("--stdin")
            # CmdFlags+=("/dev/shm/.$(eyeprint $interpreter)/$1")
            # EnvFlags+=("PYTHONPATH=$HOME/Tholos/.engine/.pyzmq/lib/python3.13/site-packages")
        ;;

        *jupyterExec.py.bin)
            CmdFlags+=("$2")
            EnvFlags+=("PYTHONPATH=$HOME/Tholos/.libraries/python")
        ;;

        *)
            :
        ;;
    esac

#   Arguments to inject to the interpreter invocation
    local CmdLine
    [[ -n ${CmdFlags[@]} ]] && {
        for arg in ${CmdFlags[@]}; do
            CmdLine+=$"
        parts = append(parts, \"$arg\")"
        done
    }

#   Paths to include in the environment at runtime
    local EnvLine
    [[ -n ${EnvFlags[@]} ]] && {
        for arg in "${EnvFlags[@]}"; do
            EnvLine+=$"
        cmd.Env = append(os.Environ(), \"$arg\")"
        done
    }

    cat <<< "Embedding with injected command arguments: $CmdLine" > $verbosity
    cat <<< "Embedding with injected environ arguments: $EnvLine" > $verbosity


    length=32

    keyMake() {
        SealKey=$(openssl rand -hex $1)
    }; keyMake $length

    suggestion=${1%.*}
    echo $suggestion > $verbosity  






#<  Metacode Metagen        #################################################

    local metadir="$loc/.meta"


    #   all sigils appearing in the metas should be registered here
    export eyeInt=$(eyeprint $interpreter)
    export eyeOne=$(eyeprint $1)
    export I=$1         #   << | if something broke you probably just used $1 instead of $I
    # export II=$2      #      | The roman numerals are necessary because it has to be done
    # export III=$3     #      | in letters instead of numbers for the export to work right
    # export IV=$4
    list=(
        lib
        interpreter
        scheterpreter
        suggestion
        SealKey
        CmdLine
        EnvLine
        needFile
    )
    for e in ${list[@]}; do
        # shellcheck disable=SC2163
        export "$e"
    done


    metalith() {
        envsubst < $metadir/core.go.meta > ./"$I".go
    }


    clobber=0
    if [[ $clobber == 1 ]]; then        #   change to 1 if you want to keep modules
        ls ./"$I".go &>/dev/null || \   #   after modifying them and instead create
        metalith                        #   executables from the modified thol mods
    else                                #   Mostly useful for toolsmiths who do not
        rm ./"$I".go &>/dev/null        #   want their custom .go logic to be reset
        metalith                        #   when embedding technicolour mad hattery
        # envsubst < $metadir/import > ./"$I".go
    fi

#/*
### Metascript fin #################################################################
####################################################################################


#<  Compiler flags
    if [[ "$@" =~ '--cgo' ]]; then
        cgo=1   #<< | Cgo is required for bridge integrations. Impact is negligible
    else        #   | but existent. The default is cgo disabled. Revert as required
        cgo=0   #   | though this is done automatically when using one of the below
    fi          #   | flags if the integration requires it

    if [[ "$@" =~ '--nif' ]]; then
        :       #<< | Enables nif for elixir which is very low latency, but crashes
        cgo=1   #   | are severe so treat this as an unsafe option. Elixir also can
    fi          #   | use the --cgo option, and use ports. Only really relevant for
                #   | here if the elixir specifically needs access to the functions
                #   | embedded in the thol, or if the thol module would be modified
                #   | to provide hardware access by virtue of already using cgo. So
                #   | for example keeping the thol as main, and then importing cuda
                #   | related code into that. The compiler in that case should look
                #   | something similar to this stanza


    if [[ "$@" =~ '--dwarf' ]]; then
        :                           #   Disables debug information which poses some
    else                            #   limited bloat and security risk. This might
        :                           #   be enabled for production but not where the
        ldflags='-ldflags=-w'       #   module expected to work fine, or there is a
    fi                              #   threat model to consider. Tholos has logged
                                    #   errors which appear in the logs/ folder, so
                                    #   there is still debug information

#<  Compiler command
    if command -v go &>/dev/null; then
        GOOS=linux GOARCH=amd64 CGO_ENABLED=$cgo go build "$ldflags" -o "$1.bin" "$1.go" && strip "$1.bin"
    else
        echo "[094m    Golang is not installed...[0m"
        exit 1
    fi


#<  Link to path if --link or --path is used, allowing the standalone to be used in cli immediately (useful in make)
	if [[ "$@" =~ --link ]] || [[ "$@" =~ --path ]]; then
		mkdir -p ~/.local/bin/
		ln -sf "$(realpath "$1".bin)" ~/.local/bin/"$1"
	fi

};


main() {
    monolith $@
}

main $@


echo -e '\r  âœ“ Compiling Binary...done[0m' >$quietude