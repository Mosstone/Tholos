            Tholos embeds executable modules in iterative languages, creating portable Go modules and compiled binaries

Usage:      $ cat Bonjour.py 
            #!/usr/bin/env python
            print("Coucou")
            $ thol Bonjour.py --quiet
            $ ./Bonjour.py.bin  <<<    The active version of python is included in the binary. This can be moved anywhere, but if the python uses imports the new system will need to have those imports as well
            Coucou

            $ ./port thol --link
            $ thol wunder --quiet; ls . | grep wunder
            wunder              <<<    Keep if you're importing the .go module; it references the original at compile time and they must be in the same directory location
            wunder.go           <<<    Only keep if you're importing into a larger go binary, this is a usable module which fully includes the code at compile time
            wunder.bin          <<<    Only keep if you want the script as a standalone binary. Not relevant outside of testing if the thol code is becoming a module
                                           This has security advantages, resists mutation, and uses a snapshot of the interpreter while still using the system librariesâ€”especially useful for python


    Once generated the binary is fully standalone, whereas the .go can be integrated into larger binaries
        The .go file depends on the /.lib folder that gets created but the compiler embeds it in the bin.
        This utility is language agnostic, automatically embedding the interpreter stated in the schebang


    There are two outputs: the compiled .bin executable which is compiled as a fully embedded binary, and
        the editable .go which the .bin is compiled from. All of the embedded files the go uses is in the
        .lib folder which is shared for all compiled go outputs in the same directory. So if they are all
        in the same folder and then included in the same golang compile, the embed would only include one
        version of the interpreter for all of them. The resulting large binary may then be able to access
        the embedded files and their interpreters


    Use --link or --path to also add the binary as a command, creating a symlink at the present directory
        use only if the bin will stay in place and not be renamed. Otherwise, the command for it is this:
        ln -s "$(realpath <code to execute>)" ~/.local/bin/<command to type>


    Requires a valid schebang in this format: #!/usr/bin/env <interpreter>
        thol begins matching after the ! so you can use other comments such as // or % if there is ever a
        requirement. Anything other than that will not pass the enforcement check. Yes, this includes the
        /usr/bin/bash schebang that you've been using


    Confirmed to work on bash, python, rust (rust-script), ruby, php, lua, haskell, perl, scala, and deno
        Notably, using rust-script allows thol to embed rust code into a go binary and rust code normally
        without the project spiralling deeper into the rust miasma. For any given language embedded using
        this utility, the interpreters will share an interpreter cache, so long as they share a directory


    Tholos can now be used for build files, embedding make ninja and meson. It uses the schebang like for
        everything else, so as long as it starts with "#!/usr/bin/env make|ninja|meson", it can be turned
        into a thol module and executed like any other file. Note ninja and meson support zero copy embed
        but make requires the tmpfs file to be written. This shouldn't affect anything but ninja+meson is
        still a natural fit
            These build methods would allow for dynamic executable builds, simplifying deployment, making
            metaprogramming versatile and accessible invokable where shell and scripting is not available

            Tholos is inherently immutable once compiled so the build instruct is also difficult to alter
            without changing the binary itself. If imported into a larger project binary, the application
            would then have a tamper resistent means of distributed self installation

            This also puts all in place for standardized extraction methods for git, since you could just
            type "git clone my/project; ~/project/install.bin" instead of figuring out which build method
            was used for the project and hoping that it works


    Tholos can be used with ansible and terraform to create scripts in an executable format if they start
        with the valid schebang. Further usage is straightforward, and identical to terraform and ansible
        run normally using the cli commands. You can adjust run flags altering the .go file, but it needs
        to execute on its own without user interactions. The -auto-approve flag in terraform is therefore
        non optional but everything else is adjustable with the parts = append(parts, "<arg>") line
            Refer to the included script examples for minimal forms of each


    Now also able to create latex files with luatex embedded. Just use #!/usr/bin/env luatex, followed by
        valid lua to create automated latex generation. If incorporated into scientific applications this
        could create a powerful way to create and maintain latex. If placed imported by a go based mpi it
        would be able to document all the data passing through it into latex, making this Tholos valuable
        for scientific and machine learning for capturing and visualizing data
            Notably, the luatex binary module is 8MB, compared to hundreds of MB for other latex installs
            and I measured it at ~19MS compared to 100-200MS for other latex solutions, and Tholos shares
            interpreters if multiples are imported in the same go binary


    Note that while the interpreter is embedded and included in the .bin, the modules are loaded from the 
        original environment. This works well with anaconda and miniforge. I expected that the binary will
        need to be regenerated anyway due to security patches, so at least this way it means only updating
        the interpreter every few decades rather than regenerating every thol module. For most purposes it
        should remain portable so long as the interpreter modules are present and compatible with the port
        installed version of the interpreter

    Note that while the interpreter is embedded in the binary, libraries are loaded from the environment
        so that binaries with Tholos modules will inherit security updates, without needing to recompile
        with each library update. This works will with conda envs, when a go binary is executed from one
        the pinned dependencies are used by thol modules over systemwide dependencies. Therefore you can
        update with mamba and safely version the environments without recompiling anything. In container
        applicataions I suggest using miniforge inside the container to manage it with mamba rather than
        installing dependencies directly to the container


    Only the interpreter is saved to the memory filesystem, the embedded file itself is then loaded into
        the interpreter directly. For most languages, thol follows a zero copy pattern where the scripts
        are passed into the buffer, but for certain languages (rust) this does not appear to be feasible
        so they use a written copy of the code instead which is discarded after execution by default
            When a file is written, it uses the same logic as the interpreter files, avoiding collisions
            by occupying a namespace derived from the current environment and namespace. Thus, two users
            or containers both using the same thol on the same machine have their own copies of any file
            created by the module

            currently, the following interpreters are written tmpfs:
                "rust-script", "luatex", "deno", "Rscript", "scala", "wolframscript", "racket", "make"


    For developers, there are some functions sealMake() and sealBreak() which creates a scoped nonce and
        destroys the it afterwards. The key is hard coded into the binary and is generated at build time
        (but not compile time unless you regenerate the module). The nonce is created when the module is
        invoked and then is discarded when used. This can be used to encrypt and decrypt files the embed
        creates. If you really need to decrypt multiple files, you'll need to shadow the nonce before it
        is discarded following sealBreak()
            By default the encryption is only for obfuscation, if you want proper security you can add a
            tpm using the commented out sealKey function. Otherwise the key cannot be securely stored in
            a module. Set the hexKey variable to an external key to secure the system
        

    Supported languages
bash
python
rust    (via rust-script)
perl
R
javascript
ruby
php
lua
luatex
haskell
scala
deno
matlab    (via octave)
wolfram
tcl
rexx
scheme    (via racket)

    Unsupported languages
java
elixir
assembly


    Does not currently work with java, julia, or elixir due to their strict structures :(

TODO
    move out of /dev/shm/ due to rising property values
    enable unsupported languages


If this code is used in a publication or in a system which is used in a publication, please cite the following:
    **Buerer, Daniel** (2025). *Tholos* (Version 1.2) [Computer software].
    https://doi.org/10.5281/zenodo.15350673
or reference the citation.cff for standard format information
